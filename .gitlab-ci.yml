#image: node:17-alpine


workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE !="merge_request_event"
      when: never
    - when: always


variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  DEV_SERVER: 192.168.57.6
  STAGING_SERVER: 192.168.57.7
  #IMAGE_TAG: "1.0"


stages:
  - test
  - build
  #- pull
  - .deploy
  - deploy_dev
  - deploy_staging
  - deploy_prod




run_unit_tests:
  stage: test
  image: node:17-alpine
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
  tags:
    - docker
  before_script:
  - cd app
  - npm install  
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml


sast:
  stage: test      




run_lint_checks:
  stage: test
  image: node:17-alpine
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
    policy: pull  
  tags:
    - docker
  before_script:
    - cd app
    - npm install
  script:
    - echo "running lint checks1"  




build_image: 
  stage: build
  tags: 
    - shellrun
    #- docker     
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version_file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION . 
  artifacts:
    paths:
      - version_file.txt

push_image:
  stage: build
  needs:
    - build_image
  dependencies:
    - build_image
  tags:
    - shellrun 
  before_script: 
    - export VERSION=$(cat version_file.txt)
    - echo "Docker registry url is $CI_REGISTRY" 
    - echo " Docker registry user is $CI_REGISTRY_USER"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION


#pull_image:
  #stage: pull
  #tags:
  #  - shellrun
  #before_script: 
  #  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com  
  #script:
  #  - docker pull  $CI_REGISTRY_IMAGE:1.0  

.deploy:
  dependencies:
    - build_image
  variables:
   #SERVER_HOST: " "
    APP_PORT: " "   
  tags:
    - shellrun
  before_script:
    - export VERSION=$(cat version_file.txt) 
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export COMPOSE_PROJECT_NAME=$DEPLOY_ENV
      export DC_IMAGE_NAME=$IMAGE_NAME &&
      export DC_IMAGE_TAG=$VERSION &&
      export DC_APP_PORT=$APP_PORT &&
      docker-compose -f docker-compose.yaml down &&
      docker-compose -f docker-compose.yaml up -d
    #- sleep 30
    #- docker-compose -f docker-compose.yaml down  
  environment:
    name: $DEPLOY_ENV
  variables:
    #SERVER_HOST: " "
    APP_PORT: " " 



deploy_to_dev:
  extends: .deploy
  stage: deploy_dev
  variables:
    APP_PORT: 3200
    DEPLOY_ENV: development

deploy_to_staging:
  extends: .deploy
  stage: deploy_staging
  variables:
    APP_PORT: 4200 
    DEPLOY_ENV: staging  



run_performance_tests:
  stage: deploy_staging
  needs:
    - deploy_to_staging
  script: 
    - echo "Running performance tests"

deploy_to_prod:
  extends: .deploy
  stage: deploy_prod
  needs:
    - build_image
    - run_performance_tests
  variables:
    #SSH_KEY: $SSH_PRIVATE_KEY
    #SERVER_HOST: $PROD_SERVER_HOST
    DEPLOY_ENV: production
    APP_PORT: 5200
    #ENDPOINT: $PROD_ENDPOINT
  when: manual





    #SERVER_HOST:
  #stage: deploy
  #dependencies:
  #  - build_image
  #tags:
  # - shellrun
  #before_script:
  #  - export VERSION=$(cat version_file.txt)  
  #script:
  #  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
   #   export DC_IMAGE_NAME=$IMAGE_NAME &&
  #    export DC_IMAGE_TAG=$VERSION &&
  #    export DC_APP_PORT=3200 &&
  #    docker-compose -f docker-compose.yaml down &&
  #    docker-compose -f docker-compose.yaml up -d
    #- sleep 30
    #- docker-compose -f docker-compose.yaml down

#test_dev:
  #stage: deploy
  #dependencies: []
  #script:
  #  - echo "testing"



include:
  - template: Jobs/SAST.gitlab-ci.yml

